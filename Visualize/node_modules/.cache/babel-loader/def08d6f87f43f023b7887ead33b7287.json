{"ast":null,"code":"import { clearwalls_nodes, clearpath, randomwall, randomweights, activateit, sleep } from \"../clearfuncs\";\nimport { wallnodeclr, normalborderclr, normalnodeclr, visited1, visited2, pathnodeclr } from \"../colors\";\n\nconst randomnum = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1) + start);\n};\n\nlet arr = [],\n    num = 0;\n\nfor (let i = 0; i < 29; i++) {\n  for (let j = 0; j < 71; j++) {\n    arr[i] = [];\n  }\n}\n\nfor (let i = 0; i < 29; i++) {\n  for (let j = 0; j < 71; j++) {\n    num++;\n    arr[i][j] = num;\n  }\n}\n\nconst animatenode = node => {\n  node.style.backgroundColor = wallnodeclr;\n  node.style.borderColor = wallnodeclr;\n  node.style.animation = \"popup 100ms ease-out\";\n  sleep(30);\n};\n\nconst animewait = node => {\n  setTimeout(() => animatenode(node), 0);\n};\n\nconst addwall = (allnodes, val) => {\n  if (allnodes[val].children.length == 0) {\n    setTimeout(() => animewait(allnodes[val]), 0);\n  }\n};\n\nexport const zigzag = () => {\n  clearwalls_nodes();\n  clearpath();\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let top = 1;\n  let num = randomnum(5, 27);\n  console.log(num);\n  let i = num,\n      j = 1;\n  console.log(i, \" \", j, arr[i][j]);\n\n  while (j <= 69 && (i >= 1 || i <= 27)) {\n    if (top == 1) {\n      if (i <= 1) top = 0;else {\n        console.log(i, \" \", j, arr[i][j]);\n        addwall(allnodes, arr[i][j] - 1);\n        i--;\n        j++;\n      }\n    } else if (top == 0) {\n      if (i >= 27) top = 1;else {\n        console.log(i, \" \", j, arr[i][j]);\n        addwall(allnodes, arr[i][j] - 1);\n        i++;\n        j++;\n      }\n    }\n  }\n\n  setTimeout(() => activateit(allnodes, -1), 0);\n};","map":{"version":3,"sources":["/home/saikrupananda/vscode/LiveSites/Visualizer/Visualize/src/components/pathfinder/mazes/zigzag.js"],"names":["clearwalls_nodes","clearpath","randomwall","randomweights","activateit","sleep","wallnodeclr","normalborderclr","normalnodeclr","visited1","visited2","pathnodeclr","randomnum","start","end","Math","floor","random","arr","num","i","j","animatenode","node","style","backgroundColor","borderColor","animation","animewait","setTimeout","addwall","allnodes","val","children","length","zigzag","nodes","document","getElementsByClassName","top","console","log"],"mappings":"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","sourcesContent":["import {\n  clearwalls_nodes,\n  clearpath,\n  randomwall,\n  randomweights,\n  activateit,\n  sleep,\n} from \"../clearfuncs\";\n\nimport {\n  wallnodeclr,\n  normalborderclr,\n  normalnodeclr,\n  visited1,\n  visited2,\n  pathnodeclr,\n} from \"../colors\";\n\nconst randomnum = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1) + start);\n};\n\nlet arr = [],\n  num = 0;\nfor (let i = 0; i < 29; i++) {\n  for (let j = 0; j < 71; j++) {\n    arr[i] = [];\n  }\n}\nfor (let i = 0; i < 29; i++) {\n  for (let j = 0; j < 71; j++) {\n    num++;\n    arr[i][j] = num;\n  }\n}\nconst animatenode = (node) => {\n  node.style.backgroundColor = wallnodeclr;\n  node.style.borderColor = wallnodeclr;\n  node.style.animation = \"popup 100ms ease-out\";\n  sleep(30);\n};\n\nconst animewait = (node) => {\n  setTimeout(() => animatenode(node), 0);\n};\n\nconst addwall = (allnodes, val) => {\n  if (allnodes[val].children.length == 0) {\n    setTimeout(() => animewait(allnodes[val]), 0);\n  }\n};\n\nexport const zigzag = () => {\n  clearwalls_nodes();\n  clearpath();\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let top = 1;\n  let num = randomnum(5, 27);\n  console.log(num);\n  let i = num,\n    j = 1;\n  console.log(i, \" \", j, arr[i][j]);\n  while (j <= 69 && (i >= 1 || i <= 27)) {\n    if (top == 1) {\n      if (i <= 1) top = 0;\n      else {\n        console.log(i, \" \", j, arr[i][j]);\n        addwall(allnodes, arr[i][j] - 1);\n        i--;\n        j++;\n      }\n    } else if (top == 0) {\n      if (i >= 27) top = 1;\n      else {\n        console.log(i, \" \", j, arr[i][j]);\n        addwall(allnodes, arr[i][j] - 1);\n        i++;\n        j++;\n      }\n    }\n  }\n  setTimeout(() => activateit(allnodes, -1), 0);\n};\n"]},"metadata":{},"sourceType":"module"}