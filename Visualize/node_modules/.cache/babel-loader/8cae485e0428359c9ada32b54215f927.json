{"ast":null,"code":"import { activateit, sleep, clearwalls_nodes, clearpath } from \"../clearfuncs\";\nimport { adjlist } from \"../algorithms/gridsetup\";\nimport { wallnodeclr, normalborderclr, normalnodeclr, visited1, visited2, pathnodeclr } from \"../colors\";\nimport { getcoord } from \"./krushkals\";\nlet stack = [];\nlet krush = [];\nlet visited = [];\nlet stk2 = [];\nlet stk3 = [];\nlet stk4 = [];\nlet wallsarr = [];\nlet arr = [];\nlet directions1 = [[0, 2], [0, -2], [-2, 0], [2, 0]];\nlet directions2 = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\nconst dfssetup = () => {\n  stack = [];\n  visited = [];\n  stk2 = [];\n  stk3 = [];\n  stk4 = [];\n  wallsarr = [];\n\n  for (let i = 0; i < 29; i++) {\n    let temp = [];\n\n    for (let j = 0; j < 71; j++) temp.push(false);\n\n    visited.push(temp);\n  }\n\n  arr = [];\n  let val = 0;\n\n  for (let i = 0; i < 29; i++) {\n    let temp = [];\n\n    for (let j = 0; j < 71; j++) {\n      temp.push(val);\n      val++;\n    }\n\n    arr.push(temp);\n  }\n\n  directions1 = [[0, 2], [0, -2], [-2, 0], [2, 0]];\n  directions2 = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n  for (let i = 0; i < 2059; i++) {\n    wallsarr[i] = true;\n  }\n}; // dfssetup();\n\n\nfunction getRndnDirec() {\n  let array = [[0, 2], [0, -2], [-2, 0], [2, 0]];\n  var currentIndex = array.length,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport const shuffle = array => {\n  var currentIndex = array.length,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n};\n\nfunction DFS(i, j) {\n  stack.push([i, j]);\n  var temp = getRndnDirec();\n  visited[i][j] = true;\n  temp.forEach(([x, y]) => {\n    let p = i + x,\n        q = j + y;\n\n    if (0 <= p && p < 29 && 0 <= q && q < 71) {\n      if (!visited[p][q]) {\n        stk2.push([[i, j], [p, q]]);\n        DFS(p, q);\n      }\n    }\n  });\n}\n\n_c = DFS;\n\nconst prims = (i, j) => {\n  stack.push([[i, j], [i, j]]);\n\n  while (stack.length !== 0) {\n    stack = shuffle(stack);\n    let node = stack[0];\n    stk2.push(node);\n    visited[node[1][0]][node[1][1]] = true;\n    stack.shift();\n    directions1.forEach(([x, y]) => {\n      let p = node[1][0] + x,\n          q = node[1][1] + y;\n\n      if (0 <= p && p < 29 && 0 <= q && q < 71) {\n        if (!visited[p][q]) {\n          stack.push([[node[1][0], node[1][1]], [p, q]]);\n          visited[p][q] = true;\n        }\n      }\n    });\n  }\n}; //mhg\n\n\nlet root = new Array(2060);\nlet visitd = new Array(2060);\n\nconst addEdge = (u, v, dist) => {\n  adjlist.get(u).push([v, dist]);\n};\n\nconst addVertex = v => {\n  adjlist.set(v, []);\n};\n\nexport const graphsetup = () => {\n  let val = 0;\n  let arr = new Array(29);\n\n  for (let i = 0; i < 29; i++) {\n    arr[i] = new Array(71);\n  }\n\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n      arr[i][j] = val;\n    }\n  }\n\n  for (let i = 73; i <= 2059; i += 2) {\n    addVertex(i);\n  }\n\n  for (let i = 1; i < 29; i += 2) {\n    for (let j = 1; j < 71; j += 2) {\n      let vrtx = arr[i][j];\n\n      if (i - 2 >= 0) {\n        addEdge(vrtx, arr[i - 2][j], 1);\n      }\n\n      if (j + 2 < 71) {\n        addEdge(vrtx, arr[i][j + 2], 1);\n      }\n\n      if (i + 2 < 29) {\n        addEdge(vrtx, arr[i + 2][j], 1);\n      }\n\n      if (j - 2 >= 0) {\n        addEdge(vrtx, arr[i][j - 2], 1);\n      }\n    }\n  }\n\n  for (let i = 73; i <= 2059; i += 2) {\n    root[i] = i;\n  }\n\n  for (let i = 73; i <= 2059; i += 2) {\n    let m = adjlist.get(i);\n\n    for (let nd of m) {\n      if (!visitd[nd[0]]) krush.push([i, nd[0]]);\n    }\n\n    visitd[m] = 1;\n  }\n};\nexport const parent = a => {\n  while (root[a] != a) {\n    root[a] = root[root[a]];\n    a = root[a];\n  }\n\n  return a;\n};\nexport const union_find = (a, b) => {\n  let d = parent(a);\n  let e = parent(b);\n  root[d] = root[e];\n}; //mh\n\nconst kruskal = () => {\n  graphsetup();\n  let a, b;\n\n  for (let i = 0; i < 5; i++) krush = shuffle(krush);\n\n  for (let node of krush) {\n    a = node[0];\n    b = node[1];\n\n    if (parent(a) != parent(b)) {\n      //only select edge if it does not create a cycle (ie the two nodes forming it have different root nodes)\n      stk2.push([getcoord(a), getcoord(b)]);\n      union_find(a, b);\n    }\n  }\n};\n\nfunction cmpr(x, y) {\n  for (let i = 0; i < directions1.length; i++) {\n    if (directions1[i][0] == x && directions1[i][1] == y) {\n      return directions2[i];\n    }\n  }\n\n  return [0, 0];\n}\n\nfunction diff(a, b, p, q) {\n  let x = p - a;\n  let y = q - b;\n  let arr = cmpr(x, y);\n  stk3.push([a + arr[0], b + arr[1]]);\n  stk4.push([[a, b], [a + arr[0], b + arr[1]], [p, q]]);\n}\n\nconst paths = () => {\n  for (let i = 0; i < stk2.length; i++) {\n    let a = stk2[i][0][0];\n    let b = stk2[i][0][1];\n    let p = stk2[i][1][0];\n    let q = stk2[i][1][1];\n    diff(a, b, p, q);\n  } // console.log(stk3);\n\n};\n\nconst pointsurroundingwalls = num => {\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let val = 0;\n  let i, j;\n\n  for (let x = 0; x < 29; x++) {\n    for (let y = 0; y < 71; y++) {\n      val++;\n\n      if (val == num) {\n        i = x;\n        j = y;\n      }\n    }\n  }\n\n  console.log(i, j);\n\n  if (i >= 0 && i <= 28 && j >= 0 && j <= 70) {\n    if (j + 1 <= 70 && wallsarr[arr[i][j + 1]]) {\n      wallsarr[arr[i][j + 1]] = false;\n      setTimeout(() => {\n        callvisit(arr[i][j + 1], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (j - 1 >= 0 && wallsarr[arr[i][j - 1]]) {\n      wallsarr[arr[i][j - 1]] = false;\n      setTimeout(() => {\n        callvisit(arr[i][j - 1], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (i + 1 <= 28 && wallsarr[arr[i + 1][j]]) {\n      wallsarr[arr[i + 1][j]] = false;\n      setTimeout(() => {\n        callvisit(arr[i + 1][j], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (i - 1 >= 0 && wallsarr[arr[i - 1][j]]) {\n      wallsarr[arr[i - 1][j]] = false;\n      setTimeout(() => {\n        callvisit(arr[i - 1][j], allnodes, 7, normalnodeclr);\n      }, 0);\n    }\n  }\n};\n\nconst visitclr = (i, alldivs, speed, clr) => {\n  alldivs[i].style.backgroundColor = normalnodeclr;\n  alldivs[i].style.borderColor = normalborderclr;\n  alldivs[i].style.animation = \"popup4 300ms ease-in\";\n  sleep(speed); // sleep(speed + speed * 0.4);\n};\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nexport const setnodes = (algonum, bmb) => {\n  clearwalls_nodes();\n  clearpath();\n  dfssetup();\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let src, dest, bomb;\n\n  for (let i = 0; i < 2059; i++) {\n    if (allnodes[i].children.length == 1 && allnodes[i].children[0].id === \"source\") {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      src = parseInt(str);\n      console.log(src);\n    } else if (allnodes[i].children.length == 1 && allnodes[i].children[0].id === \"dest\") {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      dest = parseInt(str);\n      console.log(dest);\n    } else if (bmb && allnodes[i].children.length == 1 && allnodes[i].children[0].id === \"bomb\") {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      bomb = parseInt(str);\n      console.log(bomb);\n    }\n  }\n\n  if (algonum === 1) prims(1, 1);\n  if (algonum === 2) DFS(1, 1);\n  if (algonum === 3) kruskal();\n  paths();\n\n  for (let i = 0; i < 2059; i++) {\n    allnodes[i].style.backgroundColor = wallnodeclr;\n    allnodes[i].style.borderColor = wallnodeclr;\n  }\n\n  allnodes[src - 1].style.backgroundColor = normalnodeclr;\n  allnodes[src - 1].style.borderColor = normalborderclr;\n  allnodes[dest - 1].style.backgroundColor = normalnodeclr;\n  allnodes[dest - 1].style.borderColor = normalborderclr;\n\n  if (bmb) {\n    allnodes[bomb - 1].style.backgroundColor = normalnodeclr;\n    allnodes[bomb - 1].style.borderColor = normalborderclr;\n  }\n\n  for (let i = 0; i < stk4.length; i++) {\n    for (let j = 0; j < stk4[i].length; j++) {\n      let num = arr[stk4[i][j][0]][stk4[i][j][1]];\n      wallsarr[num] = false;\n      setTimeout(() => {\n        callvisit(num, allnodes, 5, normalnodeclr);\n      }, 0);\n    }\n  }\n\n  pointsurroundingwalls(src);\n  pointsurroundingwalls(dest);\n  if (bmb) pointsurroundingwalls(bomb);\n  console.log(stk4); // for (let i = 0; i < 2059; i++) {\n  //   if (wallsarr[i] && allnodes[i].children.length == 0) {\n  //     allnodes[i].style.backgroundColor = wallnodeclr;\n  //     allnodes[i].style.borderColor = wallnodeclr;\n  //     allnodes[i].style.animation = \"popup 150ms ease-out\";\n  //   }\n  // }\n\n  setTimeout(() => activateit(allnodes, -1), 0);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"DFS\");","map":{"version":3,"sources":["/home/saikrupananda/vscode/LiveSites/Visualizer/Visualize/src/components/pathfinder/mazes/dfsmaze.js"],"names":["activateit","sleep","clearwalls_nodes","clearpath","adjlist","wallnodeclr","normalborderclr","normalnodeclr","visited1","visited2","pathnodeclr","getcoord","stack","krush","visited","stk2","stk3","stk4","wallsarr","arr","directions1","directions2","dfssetup","i","temp","j","push","val","getRndnDirec","array","currentIndex","length","randomIndex","Math","floor","random","shuffle","DFS","forEach","x","y","p","q","prims","node","shift","root","Array","visitd","addEdge","u","v","dist","get","addVertex","set","graphsetup","vrtx","m","nd","parent","a","union_find","b","d","e","kruskal","cmpr","diff","paths","pointsurroundingwalls","num","nodes","document","getElementsByClassName","allnodes","console","log","setTimeout","callvisit","visitclr","alldivs","speed","clr","style","backgroundColor","borderColor","animation","callvisit2","setnodes","algonum","bmb","src","dest","bomb","children","id","str","parentNode","replace","parseInt"],"mappings":"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","sourcesContent":["import { activateit, sleep, clearwalls_nodes, clearpath } from \"../clearfuncs\";\nimport { adjlist } from \"../algorithms/gridsetup\";\n\nimport {\n  wallnodeclr,\n  normalborderclr,\n  normalnodeclr,\n  visited1,\n  visited2,\n  pathnodeclr,\n} from \"../colors\";\n\nimport { getcoord } from \"./krushkals\";\n\nlet stack = [];\nlet krush = [];\nlet visited = [];\nlet stk2 = [];\nlet stk3 = [];\nlet stk4 = [];\nlet wallsarr = [];\nlet arr = [];\nlet directions1 = [\n  [0, 2],\n  [0, -2],\n  [-2, 0],\n  [2, 0],\n];\nlet directions2 = [\n  [0, 1],\n  [0, -1],\n  [-1, 0],\n  [1, 0],\n];\n\nconst dfssetup = () => {\n  stack = [];\n  visited = [];\n  stk2 = [];\n  stk3 = [];\n  stk4 = [];\n  wallsarr = [];\n  for (let i = 0; i < 29; i++) {\n    let temp = [];\n    for (let j = 0; j < 71; j++) temp.push(false);\n    visited.push(temp);\n  }\n  arr = [];\n  let val = 0;\n  for (let i = 0; i < 29; i++) {\n    let temp = [];\n    for (let j = 0; j < 71; j++) {\n      temp.push(val);\n      val++;\n    }\n    arr.push(temp);\n  }\n\n  directions1 = [\n    [0, 2],\n    [0, -2],\n    [-2, 0],\n    [2, 0],\n  ];\n  directions2 = [\n    [0, 1],\n    [0, -1],\n    [-1, 0],\n    [1, 0],\n  ];\n  for (let i = 0; i < 2059; i++) {\n    wallsarr[i] = true;\n  }\n};\n// dfssetup();\n\nfunction getRndnDirec() {\n  let array = [\n    [0, 2],\n    [0, -2],\n    [-2, 0],\n    [2, 0],\n  ];\n  var currentIndex = array.length,\n    randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n}\n\nexport const shuffle = (array) => {\n  var currentIndex = array.length,\n    randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n  return array;\n};\n\nfunction DFS(i, j) {\n  stack.push([i, j]);\n  var temp = getRndnDirec();\n  visited[i][j] = true;\n  temp.forEach(([x, y]) => {\n    let p = i + x,\n      q = j + y;\n    if (0 <= p && p < 29 && 0 <= q && q < 71) {\n      if (!visited[p][q]) {\n        stk2.push([\n          [i, j],\n          [p, q],\n        ]);\n        DFS(p, q);\n      }\n    }\n  });\n}\n\nconst prims = (i, j) => {\n  stack.push([\n    [i, j],\n    [i, j],\n  ]);\n  while (stack.length !== 0) {\n    stack = shuffle(stack);\n    let node = stack[0];\n    stk2.push(node);\n    visited[node[1][0]][node[1][1]] = true;\n    stack.shift();\n    directions1.forEach(([x, y]) => {\n      let p = node[1][0] + x,\n        q = node[1][1] + y;\n      if (0 <= p && p < 29 && 0 <= q && q < 71) {\n        if (!visited[p][q]) {\n          stack.push([\n            [node[1][0], node[1][1]],\n            [p, q],\n          ]);\n          visited[p][q] = true;\n        }\n      }\n    });\n  }\n};\n\n//mhg\n\nlet root = new Array(2060);\nlet visitd = new Array(2060);\n\nconst addEdge = (u, v, dist) => {\n  adjlist.get(u).push([v, dist]);\n};\n\nconst addVertex = (v) => {\n  adjlist.set(v, []);\n};\n\nexport const graphsetup = () => {\n  let val = 0;\n  let arr = new Array(29);\n  for (let i = 0; i < 29; i++) {\n    arr[i] = new Array(71);\n  }\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n      arr[i][j] = val;\n    }\n  }\n  for (let i = 73; i <= 2059; i += 2) {\n    addVertex(i);\n  }\n  for (let i = 1; i < 29; i += 2) {\n    for (let j = 1; j < 71; j += 2) {\n      let vrtx = arr[i][j];\n      if (i - 2 >= 0) {\n        addEdge(vrtx, arr[i - 2][j], 1);\n      }\n      if (j + 2 < 71) {\n        addEdge(vrtx, arr[i][j + 2], 1);\n      }\n      if (i + 2 < 29) {\n        addEdge(vrtx, arr[i + 2][j], 1);\n      }\n      if (j - 2 >= 0) {\n        addEdge(vrtx, arr[i][j - 2], 1);\n      }\n    }\n  }\n  for (let i = 73; i <= 2059; i += 2) {\n    root[i] = i;\n  }\n\n  for (let i = 73; i <= 2059; i += 2) {\n    let m = adjlist.get(i);\n    for (let nd of m) {\n      if (!visitd[nd[0]]) krush.push([i, nd[0]]);\n    }\n    visitd[m] = 1;\n  }\n};\n\nexport const parent = (a) => {\n  while (root[a] != a) {\n    root[a] = root[root[a]];\n    a = root[a];\n  }\n  return a;\n};\n\nexport const union_find = (a, b) => {\n  let d = parent(a);\n  let e = parent(b);\n  root[d] = root[e];\n};\n\n//mh\n\nconst kruskal = () => {\n  graphsetup();\n  let a, b;\n  for (let i = 0; i < 5; i++) krush = shuffle(krush);\n  for (let node of krush) {\n    a = node[0];\n    b = node[1];\n    if (parent(a) != parent(b)) {\n      //only select edge if it does not create a cycle (ie the two nodes forming it have different root nodes)\n      stk2.push([getcoord(a), getcoord(b)]);\n      union_find(a, b);\n    }\n  }\n};\n\nfunction cmpr(x, y) {\n  for (let i = 0; i < directions1.length; i++) {\n    if (directions1[i][0] == x && directions1[i][1] == y) {\n      return directions2[i];\n    }\n  }\n  return [0, 0];\n}\n\nfunction diff(a, b, p, q) {\n  let x = p - a;\n  let y = q - b;\n  let arr = cmpr(x, y);\n  stk3.push([a + arr[0], b + arr[1]]);\n  stk4.push([\n    [a, b],\n    [a + arr[0], b + arr[1]],\n    [p, q],\n  ]);\n}\n\nconst paths = () => {\n  for (let i = 0; i < stk2.length; i++) {\n    let a = stk2[i][0][0];\n    let b = stk2[i][0][1];\n    let p = stk2[i][1][0];\n    let q = stk2[i][1][1];\n    diff(a, b, p, q);\n  }\n  // console.log(stk3);\n};\n\nconst pointsurroundingwalls = (num) => {\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let val = 0;\n  let i, j;\n  for (let x = 0; x < 29; x++) {\n    for (let y = 0; y < 71; y++) {\n      val++;\n      if (val == num) {\n        i = x;\n        j = y;\n      }\n    }\n  }\n  console.log(i, j);\n  if (i >= 0 && i <= 28 && j >= 0 && j <= 70) {\n    if (j + 1 <= 70 && wallsarr[arr[i][j + 1]]) {\n      wallsarr[arr[i][j + 1]] = false;\n      setTimeout(() => {\n        callvisit(arr[i][j + 1], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (j - 1 >= 0 && wallsarr[arr[i][j - 1]]) {\n      wallsarr[arr[i][j - 1]] = false;\n      setTimeout(() => {\n        callvisit(arr[i][j - 1], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (i + 1 <= 28 && wallsarr[arr[i + 1][j]]) {\n      wallsarr[arr[i + 1][j]] = false;\n      setTimeout(() => {\n        callvisit(arr[i + 1][j], allnodes, 7, normalnodeclr);\n      }, 0);\n    } else if (i - 1 >= 0 && wallsarr[arr[i - 1][j]]) {\n      wallsarr[arr[i - 1][j]] = false;\n      setTimeout(() => {\n        callvisit(arr[i - 1][j], allnodes, 7, normalnodeclr);\n      }, 0);\n    }\n  }\n};\n\nconst visitclr = (i, alldivs, speed, clr) => {\n  alldivs[i].style.backgroundColor = normalnodeclr;\n  alldivs[i].style.borderColor = normalborderclr;\n  alldivs[i].style.animation = \"popup4 300ms ease-in\";\n  sleep(speed);\n  // sleep(speed + speed * 0.4);\n};\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nexport const setnodes = (algonum, bmb) => {\n  clearwalls_nodes();\n  clearpath();\n  dfssetup();\n  let nodes = document.getElementsByClassName(\"nodes\");\n  let allnodes = [...nodes];\n  let src, dest, bomb;\n  for (let i = 0; i < 2059; i++) {\n    if (\n      allnodes[i].children.length == 1 &&\n      allnodes[i].children[0].id === \"source\"\n    ) {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      src = parseInt(str);\n      console.log(src);\n    } else if (\n      allnodes[i].children.length == 1 &&\n      allnodes[i].children[0].id === \"dest\"\n    ) {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      dest = parseInt(str);\n      console.log(dest);\n    } else if (\n      bmb &&\n      allnodes[i].children.length == 1 &&\n      allnodes[i].children[0].id === \"bomb\"\n    ) {\n      let str = allnodes[i].children[0].parentNode.id;\n      str = str.replace(\"node\", \"\");\n      bomb = parseInt(str);\n      console.log(bomb);\n    }\n  }\n  if (algonum === 1) prims(1, 1);\n  if (algonum === 2) DFS(1, 1);\n  if (algonum === 3) kruskal();\n  paths();\n  for (let i = 0; i < 2059; i++) {\n    allnodes[i].style.backgroundColor = wallnodeclr;\n    allnodes[i].style.borderColor = wallnodeclr;\n  }\n  allnodes[src - 1].style.backgroundColor = normalnodeclr;\n  allnodes[src - 1].style.borderColor = normalborderclr;\n  allnodes[dest - 1].style.backgroundColor = normalnodeclr;\n  allnodes[dest - 1].style.borderColor = normalborderclr;\n  if (bmb) {\n    allnodes[bomb - 1].style.backgroundColor = normalnodeclr;\n    allnodes[bomb - 1].style.borderColor = normalborderclr;\n  }\n  for (let i = 0; i < stk4.length; i++) {\n    for (let j = 0; j < stk4[i].length; j++) {\n      let num = arr[stk4[i][j][0]][stk4[i][j][1]];\n      wallsarr[num] = false;\n      setTimeout(() => {\n        callvisit(num, allnodes, 5, normalnodeclr);\n      }, 0);\n    }\n  }\n  pointsurroundingwalls(src);\n  pointsurroundingwalls(dest);\n  if (bmb) pointsurroundingwalls(bomb);\n\n  console.log(stk4);\n  // for (let i = 0; i < 2059; i++) {\n  //   if (wallsarr[i] && allnodes[i].children.length == 0) {\n  //     allnodes[i].style.backgroundColor = wallnodeclr;\n  //     allnodes[i].style.borderColor = wallnodeclr;\n  //     allnodes[i].style.animation = \"popup 150ms ease-out\";\n  //   }\n  // }\n  setTimeout(() => activateit(allnodes, -1), 0);\n};\n"]},"metadata":{},"sourceType":"module"}