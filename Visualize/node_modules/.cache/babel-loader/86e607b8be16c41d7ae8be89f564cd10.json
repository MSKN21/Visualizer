{"ast":null,"code":"import { wallnodeclr, normalborderclr, normalnodeclr, visited1, visited2, visited3, pathnodeclr } from \"../colors\";\nimport { adjlist, graph_init, pathcolor, visitclr, getweight } from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst getcoord = x => {\n  let val = 0;\n  let arr = new Array(2);\n\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n\n      if (val == x) {\n        arr[0] = i;\n        arr[1] = j;\n        return arr;\n      }\n    }\n  }\n};\n\nconst herucalc = (a, b) => {\n  let first = getcoord(a);\n  let last = getcoord(b);\n  let hval = Math.abs(last[1] - first[1]) + Math.abs(last[0] - first[0]);\n  return hval;\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst startGBFS = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let novst = 0;\n  let totdst = 0;\n  let st = [];\n  let m = herucalc(u, dest);\n  st.push([m, u]);\n  dist[u] = m;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n    let v = now[1];\n    let w = now[0];\n    visit[v] = 1;\n    setTimeout(() => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr), 0);\n    novst++;\n    if (v === dest) break;\n    let edges = adjlist.get(v);\n\n    for (let to of edges) {\n      if (visit[to[0]] === 0) {\n        visit[to[0]] = 1;\n        dist[to[0]] = herucalc(to[0], dest);\n        prev[to[0]] = v;\n        st.push([dist[to[0]], to[0]]);\n      }\n    }\n  }\n\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n\n  console.log(path);\n  return [novst, totdst, path];\n};\n\nexport const gbfs = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startGBFS(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src) b = startGBFS(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src) setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];else return [a[0], 0];\n    return res;\n  }\n\n  let ar = startGBFS(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};","map":{"version":3,"sources":["/home/saikrupananda/vscode/LiveSites/Visualizer/Visualize/src/components/pathfinder/algorithms/greedybfs.js"],"names":["wallnodeclr","normalborderclr","normalnodeclr","visited1","visited2","visited3","pathnodeclr","adjlist","graph_init","pathcolor","visitclr","getweight","sleep","activateit","callvisit","i","alldivs","speed","clr","setTimeout","callvisit2","activateit2","val","getcoord","x","arr","Array","j","herucalc","a","b","first","last","hval","Math","abs","sortFunction","startGBFS","u","dest","dist","fill","prev","visit","novst","totdst","st","m","push","divs","document","getElementsByClassName","length","sort","now","shift","v","w","edges","get","to","path","crawl","console","log","gbfs","bmb","src","parseInt","getElementById","parentNode","id","slice","dst","bomb","res","ar"],"mappings":"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","sourcesContent":["import {\n  wallnodeclr,\n  normalborderclr,\n  normalnodeclr,\n  visited1,\n  visited2,\n  visited3,\n  pathnodeclr,\n} from \"../colors\";\n\nimport {\n  adjlist,\n  graph_init,\n  pathcolor,\n  visitclr,\n  getweight,\n} from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst getcoord = (x) => {\n  let val = 0;\n  let arr = new Array(2);\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n      if (val == x) {\n        arr[0] = i;\n        arr[1] = j;\n        return arr;\n      }\n    }\n  }\n};\n\nconst herucalc = (a, b) => {\n  let first = getcoord(a);\n  let last = getcoord(b);\n  let hval = Math.abs(last[1] - first[1]) + Math.abs(last[0] - first[0]);\n  return hval;\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst startGBFS = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let novst = 0;\n  let totdst = 0;\n  let st = [];\n  let m = herucalc(u, dest);\n  st.push([m, u]);\n  dist[u] = m;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n\n    let v = now[1];\n    let w = now[0];\n    visit[v] = 1;\n    setTimeout(\n      () => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr),\n      0\n    );\n    novst++;\n    if (v === dest) break;\n\n    let edges = adjlist.get(v);\n    for (let to of edges) {\n      if (visit[to[0]] === 0) {\n        visit[to[0]] = 1;\n        dist[to[0]] = herucalc(to[0], dest);\n        prev[to[0]] = v;\n        st.push([dist[to[0]], to[0]]);\n      }\n    }\n  }\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n  console.log(path);\n  return [novst, totdst, path];\n};\n\nexport const gbfs = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startGBFS(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src)\n      b = startGBFS(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src)\n      setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];\n    else return [a[0], 0];\n    return res;\n  }\n  let ar = startGBFS(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};\n"]},"metadata":{},"sourceType":"module"}