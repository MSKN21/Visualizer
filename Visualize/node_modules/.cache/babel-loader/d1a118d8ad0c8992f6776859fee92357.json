{"ast":null,"code":"import { wallnodeclr, normalborderclr, normalnodeclr, visited1, visited2, visited3, pathnodeclr } from \"../colors\";\nimport { adjlist, graph_init, pathcolor, visitclr, getweight } from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst startDijkstra = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let st = [];\n  let novst = 0;\n  let totdst = 0;\n  st.push([0, u]);\n  dist[u] = 0;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n    let v = now[1];\n    let w = now[0];\n    setTimeout(() => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr), 0);\n    novst++;\n    if (v === dest) break;\n    let edges = adjlist.get(v);\n\n    for (let to of edges) {\n      if (w + to[1] < dist[to[0]]) {\n        for (var i = 0; i < st.length; i++) {\n          if (st[i][0] === dist[to[0]] && st[i][1] === to[0]) {\n            st.splice(i, 1);\n          }\n        }\n\n        dist[to[0]] = w + to[1];\n        prev[to[0]] = v;\n        st.push([dist[to[0]], to[0]]);\n      }\n    }\n  }\n\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n\n  console.log(path);\n  return [novst, totdst, path];\n};\n\nexport const dijkstras = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startDijkstra(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src) b = startDijkstra(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src) setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];else return [a[0], 0];\n    return res;\n  }\n\n  let ar = startDijkstra(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};","map":{"version":3,"sources":["/home/saikrupananda/vscode/LiveSites/Visualizer/Visualize/src/components/pathfinder/algorithms/dijkstra.js"],"names":["wallnodeclr","normalborderclr","normalnodeclr","visited1","visited2","visited3","pathnodeclr","adjlist","graph_init","pathcolor","visitclr","getweight","sleep","activateit","callvisit","i","alldivs","speed","clr","setTimeout","callvisit2","sortFunction","a","b","activateit2","val","startDijkstra","u","dest","dist","Array","fill","prev","visit","st","novst","totdst","push","divs","document","getElementsByClassName","length","sort","now","shift","v","w","edges","get","to","splice","path","crawl","console","log","dijkstras","bmb","src","parseInt","getElementById","parentNode","id","slice","dst","bomb","res","ar"],"mappings":"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","sourcesContent":["import {\n  wallnodeclr,\n  normalborderclr,\n  normalnodeclr,\n  visited1,\n  visited2,\n  visited3,\n  pathnodeclr,\n} from \"../colors\";\n\nimport {\n  adjlist,\n  graph_init,\n  pathcolor,\n  visitclr,\n  getweight,\n} from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst startDijkstra = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let st = [];\n  let novst = 0;\n  let totdst = 0;\n  st.push([0, u]);\n  dist[u] = 0;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n\n    let v = now[1];\n    let w = now[0];\n\n    setTimeout(\n      () => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr),\n      0\n    );\n    novst++;\n    if (v === dest) break;\n\n    let edges = adjlist.get(v);\n    for (let to of edges) {\n      if (w + to[1] < dist[to[0]]) {\n        for (var i = 0; i < st.length; i++) {\n          if (st[i][0] === dist[to[0]] && st[i][1] === to[0]) {\n            st.splice(i, 1);\n          }\n        }\n        dist[to[0]] = w + to[1];\n        prev[to[0]] = v;\n        st.push([dist[to[0]], to[0]]);\n      }\n    }\n  }\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n  console.log(path);\n\n  return [novst, totdst, path];\n};\n\nexport const dijkstras = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startDijkstra(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src)\n      b = startDijkstra(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src)\n      setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];\n    else return [a[0], 0];\n    return res;\n  }\n  let ar = startDijkstra(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};\n"]},"metadata":{},"sourceType":"module"}