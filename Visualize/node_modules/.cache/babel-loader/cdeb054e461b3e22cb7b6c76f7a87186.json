{"ast":null,"code":"import { wallnodeclr, normalborderclr, normalnodeclr, visited1, visited2, visited3, pathnodeclr } from \"../colors\";\nimport { adjlist, graph_init, pathcolor, visitclr, getweight } from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0); // sleep(20);\n};\n\nconst getcoord = x => {\n  let val = 0;\n  let arr = new Array(2);\n\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n\n      if (val == x) {\n        arr[0] = i;\n        arr[1] = j;\n        return arr;\n      }\n    }\n  }\n};\n\nconst herucalc = (a, b) => {\n  let first = getcoord(a);\n  let last = getcoord(b);\n  let hval = Math.abs(last[1] - first[1]) + Math.abs(last[0] - first[0]);\n  return hval;\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst propgateimprov = (v, w, dist, prev, st, visit, dest) => {\n  let edges = adjlist.get(v);\n\n  for (let to of edges) {\n    if (w + to[1] < dist[to[0]]) {\n      for (var i = 0; i < st.length; i++) {\n        if (st[i][1] === dist[to[0]] && st[i][2] === to[0]) {\n          st.splice(i, 1);\n        }\n      }\n\n      dist[to[0]] = w + to[1];\n      prev[to[0]] = v;\n      st.push([dist[to[0]] + herucalc(to[0], dest), dist[to[0]], to[0]]);\n\n      if (visit[to[0]]) {\n        propgateimprov(to[0], w, dist, prev, st, visit, dest);\n      }\n    }\n  }\n};\n\nconst startAstar = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let m = herucalc(u, dest);\n  let st = [];\n  let novst = 0;\n  let totdst = 0;\n  st.push([m, 0, u]);\n  dist[u] = 0;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n    let v = now[2];\n    let w = now[1];\n    let z = now[0];\n    console.log(z, w, v, getcoord(v), getcoord(dest));\n    visit[v] = 1;\n    setTimeout(() => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr), 0);\n    novst++;\n    if (v === dest) break;\n    let edges = adjlist.get(v);\n\n    for (let to of edges) {\n      let tmp = herucalc(v, dest);\n\n      if (w + to[1] < dist[to[0]]) {\n        for (var i = 0; i < st.length; i++) {\n          if (st[i][1] === dist[to[0]] && st[i][2] === to[0]) {\n            st.splice(i, 1);\n          }\n        }\n\n        dist[to[0]] = w + to[1];\n        prev[to[0]] = v;\n        st.push([dist[to[0]] + herucalc(to[0], dest), dist[to[0]], to[0]]);\n\n        if (visit[to[0]]) {\n          propgateimprov(to[0], w, dist, prev, st, visit, dest);\n        }\n      }\n    }\n  }\n\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n\n  console.log(path);\n  return [novst, totdst, path];\n};\n\nexport const astar = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startAstar(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src) b = startAstar(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src) setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];else return [a[0], 0];\n    return res;\n  }\n\n  let ar = startAstar(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};","map":{"version":3,"sources":["/home/saikrupananda/vscode/LiveSites/Visualizer/Visualize/src/components/pathfinder/algorithms/astar.js"],"names":["wallnodeclr","normalborderclr","normalnodeclr","visited1","visited2","visited3","pathnodeclr","adjlist","graph_init","pathcolor","visitclr","getweight","sleep","activateit","callvisit","i","alldivs","speed","clr","setTimeout","callvisit2","getcoord","x","val","arr","Array","j","herucalc","a","b","first","last","hval","Math","abs","sortFunction","activateit2","propgateimprov","v","w","dist","prev","st","visit","dest","edges","get","to","length","splice","push","startAstar","u","fill","m","novst","totdst","divs","document","getElementsByClassName","sort","now","shift","z","console","log","tmp","path","crawl","astar","bmb","src","parseInt","getElementById","parentNode","id","slice","dst","bomb","res","ar"],"mappings":"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","sourcesContent":["import {\n  wallnodeclr,\n  normalborderclr,\n  normalnodeclr,\n  visited1,\n  visited2,\n  visited3,\n  pathnodeclr,\n} from \"../colors\";\n\nimport {\n  adjlist,\n  graph_init,\n  pathcolor,\n  visitclr,\n  getweight,\n} from \"./gridsetup\";\nimport { sleep, activateit } from \"../clearfuncs\";\n\nconst callvisit = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    visitclr(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst callvisit2 = (i, alldivs, speed, clr) => {\n  setTimeout(() => {\n    callvisit(i, alldivs, speed, clr);\n  }, 0);\n  // sleep(20);\n};\n\nconst getcoord = (x) => {\n  let val = 0;\n  let arr = new Array(2);\n  for (let i = 0; i < 29; i++) {\n    for (let j = 0; j < 71; j++) {\n      val++;\n      if (val == x) {\n        arr[0] = i;\n        arr[1] = j;\n        return arr;\n      }\n    }\n  }\n};\n\nconst herucalc = (a, b) => {\n  let first = getcoord(a);\n  let last = getcoord(b);\n  let hval = Math.abs(last[1] - first[1]) + Math.abs(last[0] - first[0]);\n  return hval;\n};\n\nconst sortFunction = (a, b) => {\n  if (a[0] === b[0]) {\n    return 0;\n  } else {\n    return a[0] < b[0] ? -1 : 1;\n  }\n};\n\nconst activateit2 = (alldivs, val, i, speed, clr) => {\n  setTimeout(() => activateit(alldivs, val), 0);\n  setTimeout(() => callvisit(i, alldivs, speed, clr), 0);\n};\n\nconst propgateimprov = (v, w, dist, prev, st, visit, dest) => {\n  let edges = adjlist.get(v);\n  for (let to of edges) {\n    if (w + to[1] < dist[to[0]]) {\n      for (var i = 0; i < st.length; i++) {\n        if (st[i][1] === dist[to[0]] && st[i][2] === to[0]) {\n          st.splice(i, 1);\n        }\n      }\n      dist[to[0]] = w + to[1];\n      prev[to[0]] = v;\n      st.push([dist[to[0]] + herucalc(to[0], dest), dist[to[0]], to[0]]);\n      if (visit[to[0]]) {\n        propgateimprov(to[0], w, dist, prev, st, visit, dest);\n      }\n    }\n  }\n};\n\nconst startAstar = (u, dest, speed, clr) => {\n  let dist = new Array(2100).fill(50000);\n  let prev = new Array(2100).fill(-1);\n  let visit = new Array(2100).fill(0);\n  let m = herucalc(u, dest);\n  let st = [];\n  let novst = 0;\n  let totdst = 0;\n  st.push([m, 0, u]);\n  dist[u] = 0;\n  let divs = document.getElementsByClassName(\"nodes\");\n  let alldivs = [...divs];\n\n  while (st.length != 0) {\n    st.sort(sortFunction);\n    let now = st[0];\n    st.shift();\n\n    let v = now[2];\n    let w = now[1];\n    let z = now[0];\n    console.log(z, w, v, getcoord(v), getcoord(dest));\n    visit[v] = 1;\n    setTimeout(\n      () => activateit2(alldivs, alldivs[v - 1], v - 1, speed * 2, clr),\n      0\n    );\n    novst++;\n    if (v === dest) break;\n\n    let edges = adjlist.get(v);\n    for (let to of edges) {\n      let tmp = herucalc(v, dest);\n      if (w + to[1] < dist[to[0]]) {\n        for (var i = 0; i < st.length; i++) {\n          if (st[i][1] === dist[to[0]] && st[i][2] === to[0]) {\n            st.splice(i, 1);\n          }\n        }\n        dist[to[0]] = w + to[1];\n        prev[to[0]] = v;\n        st.push([dist[to[0]] + herucalc(to[0], dest), dist[to[0]], to[0]]);\n        if (visit[to[0]]) {\n          propgateimprov(to[0], w, dist, prev, st, visit, dest);\n        }\n      }\n    }\n  }\n  let path = [];\n  let crawl = dest;\n  path.push(crawl);\n  while (prev[crawl] != -1) {\n    path.push(prev[crawl]);\n    totdst += getweight(crawl, prev[crawl], adjlist);\n    crawl = prev[crawl];\n  }\n  console.log(path);\n  return [novst, totdst, path];\n};\n\nexport const astar = (speed, bmb) => {\n  graph_init();\n  let src = parseInt(document.getElementById(\"source\").parentNode.id.slice(4));\n  let dst = parseInt(document.getElementById(\"dest\").parentNode.id.slice(4));\n  let bomb;\n  if (bmb) {\n    bomb = parseInt(document.getElementById(\"bomb\").parentNode.id.slice(4));\n    let a, b;\n    a = startAstar(src, bomb, speed, visited3);\n    if (a[2][a[2].length - 1] === src)\n      b = startAstar(bomb, dst, speed, visited1);\n    setTimeout(() => pathcolor(a[2], speed * 2), 0);\n    if (a[2][a[2].length - 1] === src)\n      setTimeout(() => pathcolor(b[2], speed * 2), 0);\n    let res;\n    if (a[2][a[2].length - 1] === src) res = [a[0] + b[0], a[1] + b[1]];\n    else return [a[0], 0];\n    return res;\n  }\n  let ar = startAstar(src, dst, speed, visited1);\n  setTimeout(() => pathcolor(ar[2], speed * 2), 0);\n  return ar;\n};\n"]},"metadata":{},"sourceType":"module"}